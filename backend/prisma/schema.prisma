generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt
  suspendedAt      DateTime?
  unsuspendAt      DateTime?
  suspendedType    Int?      @db.SmallInt
  suspendedReason  String?
  ageRange         Int       @db.SmallInt
  bio              String?   @db.VarChar(255)
  birthDate        DateTime? @db.Date
  grade            Int       @default(0) @db.SmallInt
  name             String?   @unique @db.VarChar(255)
  nickname         String?   @db.VarChar(255)
  profileImageURLs String[]
  sex              Int       @default(0) @db.SmallInt
  config           Json?

  oAuth     OAuth[]
  posts     Post[]
  following UserFollow[] @relation("following")
  followers UserFollow[] @relation("followers")
}

// invitation_code char(8) UNIQUE DEFAULT unique_random(8, 'user', 'invitation_code'),

model UserFollow {
  leader     User   @relation("following", fields: [leaderId], references: [id])
  leaderId   String @db.Uuid
  follower   User   @relation("followers", fields: [followerId], references: [id])
  followerId String @db.Uuid

  @@id([leaderId, followerId])
}

model OAuth {
  id              String
  provider        Int      @default(0) @db.SmallInt
  createdAt       DateTime @default(now())
  email           String?  @db.VarChar(255)
  profileImageURL String?

  userId String? @db.Uuid
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@id([id, provider])
  @@index([userId], type: Hash)
}

model Post {
  id        BigInt    @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
  publishAt DateTime  @default(now())
  category  Int       @default(0) @db.SmallInt
  status    Int       @default(0) @db.SmallInt
  content   String?
  imageURLs String[]

  authorId       String? @db.Uuid
  author         User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  parentPostId   BigInt?
  parentPost     Post?   @relation("PostThread", fields: [parentPostId], references: [id])
  childrenPosts  Post[]  @relation("PostThread")
  referredPostId BigInt?
  referredPost   Post?   @relation("PostReference", fields: [referredPostId], references: [id])
  referringPosts Post[]  @relation("PostReference")

  // NOTE(gwak): https://dba.stackexchange.com/questions/225271/does-it-make-sense-to-create-an-index-on-foreign-key-uuid-column-in-postgres
  @@index([authorId], type: Hash)
}
